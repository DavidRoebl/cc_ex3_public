/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.IdsWrapper;
import io.swagger.model.Message;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-12-08T23:11:14.377Z")

@Api(value = "messages", description = "the messages API")
public interface MessagesApi {

    @ApiOperation(value = "get all recieved messages", notes = "returns a list of all messages that have the current user as recipient", response = IdsWrapper.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "an array of the ids of all recieved messages", response = IdsWrapper.class) })
    
    @RequestMapping(value = "/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<IdsWrapper> messagesGet(@ApiParam(value = "the authorization token of the sender" ,required=true) @RequestHeader(value="auth_token", required=true) String authToken, @ApiParam(value = "filter all read/unread messages", allowableValues = "unread") @RequestParam(value = "status", required = false) String status);


    @ApiOperation(value = "deletes a message", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "delete successful", response = Void.class),
        @ApiResponse(code = 403, message = "unable to delete message", response = Void.class) })
    
    @RequestMapping(value = "/messages/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> messagesIdDelete(@ApiParam(value = "the authorization token of the sender" ,required=true) @RequestHeader(value="auth_token", required=true) String authToken,@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);


    @ApiOperation(value = "gets a message", notes = "", response = Message.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the message defined by id", response = Message.class),
        @ApiResponse(code = 400, message = "authorization: invalid token", response = Void.class),
        @ApiResponse(code = 401, message = "authorization was null", response = Void.class),
        @ApiResponse(code = 403, message = "unable to access message - you are neither sender nor recipient", response = Void.class) })
    
    @RequestMapping(value = "/messages/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Message> messagesIdGet(@ApiParam(value = "the authorization token of the sender" ,required=true) @RequestHeader(value="auth_token", required=true) String authToken,@ApiParam(value = "",required=true ) @PathVariable("id") Integer id);


    @ApiOperation(value = "create new message", notes = "creates a new message object and sends it to the recipients", response = Message.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the newly created message", response = Message.class),
        @ApiResponse(code = 400, message = "authorization: invalid token", response = Void.class),
        @ApiResponse(code = 401, message = "authorization was null", response = Void.class) })
    
    @RequestMapping(value = "/messages",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Message> messagesPost(@ApiParam(value = "the authorization token of the sender" ,required=true) @RequestHeader(value="auth_token", required=true) String authToken,@ApiParam(value = "the message to send" ,required=true )  @Valid @RequestBody Message message);

}
